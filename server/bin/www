#!/usr/bin/env node

var app = require('../app');
var websocket = require('../websocket');
var config = require('../config');
var http = require('http');
var url = require('url');
var _ = require('lodash');

var env = process.env.NODE_ENV || 'production';
var port = normalizePort(process.env.IOT_PORT || config.PORT);
app.set('port', port);

var server = http.createServer(app);
var WebSocketServer = require('ws').Server;
global.wss = new WebSocketServer({ server: server });
wss.broadcast = function broadcast(data) {
    wss.clients.forEach(function each(client) {
        client.send(data);
    });
}

wss.getSocketsById = function(id, mode) {
    var opt = {};
    if (id) {
        opt.roomId = id;
    }
    if (mode) {
        opt.mode = mode;
    }

    return _.filter(wss.clients, opt) || [];
}

wss.broadcastTo = function(data, id, mode) {
    if (!data) return;
    var opt = {};
    if (id) {
        opt.roomId = id;
    }
    if (mode) {
        opt.mode = mode;
    }
    var p = _.filter(wss.clients, opt) || [];

    p.forEach(function each(client) {
        client.send(data);
    });
}

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Listening on ' + bind + ', env ' + env);
}

websocket(wss);